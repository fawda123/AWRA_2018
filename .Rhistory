restdat_sub <- restdat %>%
filter(date < 1996)
reststat_sub <- reststat %>%
filter(id %in% restdat_sub$id)
# get conditional probability tables
allchg_pre <- get_all(restdat_sub, reststat_sub, wqdat, wqstat,
mtch = mtch, yrdf = yrdf, resgrp = resgrp, qts = c(0.5), lbs = c('lo', 'hi'))
toplo <- allchg_pre[[2]] %>%
dplyr::select(hab, wtr, cval, salev) %>%
rename(
`Chl-a`` = cval,
Salinity = salev,
Habitat = hab,
Water = wtr
) %>%
mutate(
Habitat = factor(Habitat, levels = c('hab_bef', 'hab_aft'), labels = c('Before', 'After')),
Water = factor(Water, levels = c('wtr_bef', 'wtr_aft'), labels = c('Before', 'After'))
)
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chla-a|Habitat:Water:Salinity]")
toplo <- allchg_pre[[2]] %>%
dplyr::select(hab, wtr, cval, salev) %>%
rename(
`Chl-a` = cval,
Salinity = salev,
Habitat = hab,
Water = wtr
) %>%
mutate(
Habitat = factor(Habitat, levels = c('hab_bef', 'hab_aft'), labels = c('Before', 'After')),
Water = factor(Water, levels = c('wtr_bef', 'wtr_aft'), labels = c('Before', 'After'))
)
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chla-a|Habitat:Water:Salinity]")
mtch = mtch, yrdf = yrdf, resgrp = resgrp, qts = c(0.5), lbs = c('lo', 'hi'))
toplo <- allchg_pre[[2]] %>%
dplyr::select(hab, wtr, cval, salev) %>%
rename(
`Chl-a` = chlev,
Salinity = salev,
Habitat = hab,
Water = wtr
) %>%
mutate(
Habitat = factor(Habitat, levels = c('hab_bef', 'hab_aft'), labels = c('Before', 'After')),
Water = factor(Water, levels = c('wtr_bef', 'wtr_aft'), labels = c('Before', 'After'))
)
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chla-a|Habitat:Water:Salinity]")
toplo <- allchg_pre[[2]] %>%
dplyr::select(hab, wtr, chlev, salev) %>%
rename(
`Chl-a` = chlev,
Salinity = salev,
Habitat = hab,
Water = wtr
) %>%
mutate(
Habitat = factor(Habitat, levels = c('hab_bef', 'hab_aft'), labels = c('Before', 'After')),
Water = factor(Water, levels = c('wtr_bef', 'wtr_aft'), labels = c('Before', 'After'))
)
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chla-a|Habitat:Water:Salinity]")
net
graphviz.plot(net)
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chl-a|Habitat:Water:Salinity]")
graphviz.plot(net)
graphviz.plot(net, fill = c('orange', 'blue'))
graphviz.plot(net, highlist = list(fill = c('orange', 'blue')))
graphviz.plot(net, highlight = list(fill = c('orange', 'blue')))
graphviz.plot(net, highlight = list(fill = c('orange', 'blue', 'green', 'yellow')))
graphviz.plot(net, highlight = list(fill = c('orange'))
)
graphviz.plot(net, highlight = list(fill = list(Habitat = c('orange'))))
graphviz.plot(net, highlight = list(nodes = c('Habitat'), fill = c('orange')))
graphviz.plot(net, highlight = list(nodes = c('Habitat', 'Chla-a'), fill = c('orange', 'blue')))
graphviz.plot(net, highlight = list(nodes = c('Habitat', 'Chl-a'), fill = c('orange', 'blue')))
graphviz.plot(net, highlight = list(nodes = c('Habitat', 'Chl-a'), fill = c('orange')))
graphviz.plot(net,
highlight = list(
list(nodes = c('Habitat'), fill = c('orange')),
list(nodes = c('Chl-a'), fill = c('blue')))
)
graphviz.plot(net,
highlight = c(
list(nodes = c('Habitat'), fill = c('orange')),
list(nodes = c('Chl-a'), fill = c('blue')))
)
graphviz.plot(net,
highlight = list(
c(nodes = c('Habitat'), fill = c('orange')),
c(nodes = c('Chl-a'), fill = c('blue')))
)
data(learning.test)
res = gs(learning.test)
plot(res)
## highlight node B and related arcs.
plot(res, highlight = "B")
## highlight B and its Markov blanket.
plot(res, highlight = c("B", mb(res, "B")))
## a more compact plot.
par(oma = rep(0, 4), mar = rep(0, 4), mai = rep(0, 4),
plt = c(0.06, 0.94, 0.12, 0.88))
plot(res)
## highlight node B and related arcs.
plot(res, highlight = "B")
## highlight B and its Markov blanket.
plot(res, highlight = c("B", mb(res, "B")))
par(oma = rep(0, 4), mar = rep(0, 4), mai = rep(0, 4),
plt = c(0.06, 0.94, 0.12, 0.88))
plot(res)
?mb
plot(res, highlight = "B")
graphviz.plot(net,
highlight = c('Habitat', fill = c('orange')))
graphviz.plot(net,
highlight = c(nodes = 'Habitat', fill = c('orange')))
graphviz.plot(net,
highlight = list(nodes = 'Habitat', fill = c('orange')))
?plot.bn
plot(net, col = c('green', 'blue'))
plot(net, col = c('green'))
plot(net, color = c('green'))
plot(net, highlight = c('Habitat', color = 'green'))
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chl-a|Habitat:Water:Salinity]")
plot(net, highlight = c('Habitat', color = 'green'))
plot(net, highlight = c('Water', color = 'green'))
plot(net, highlight = c(node = 'Water', color = 'green'))
plot(net, highlight = c('Water', color = 'green'))
plot(net, highlight = c('B', color = 'green'))
plot(net, highlight = c('[Habitat]', color = 'green'))
?gs
?rgraph
net
class(net)
library(network)
library(sna)
install.packages("ggnetwork")
library(rgraph)
network
library(ggnetwork)
library(network)
library(sna)
n <- network(rgraph(10, tprob = 0.2), directed = FALSE)
b''
n''
n
network(net)
rgraph(net)
?rgraph
n <- network(rgraph(4, tprob = 0.5), directed = FALSE)
n
names(toplo)
sample(1:3, 10, replace = TRUE)
n <- network(rgraph(4, tprob = 0.5), directed = FALSE)
n %v% "family" <- names(toplo)
n %v% "importance" <- rep(1, length = ncol(toplo))
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linetype = type), color = "grey50") +
theme_blank()
n
ggnetwork(n)
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linetype = type), color = "grey50") +
geom_nodes(aes(color = family, size = importance)) +
theme_blank()
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = family, size = importance)) +
theme_blank()
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(arrow = arrow(length = unit(12, "pt"), type = "closed")) +
geom_nodes(aes(color = family, size = importance)) +
theme_blank()
?arrow
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.04) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = family, size = importance)) +
theme_blank()
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.04) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = family), size = 4) +
theme_blank()
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.04) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = family), size = 8) +
theme_blank()
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.04) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(color = family), size = 8, pch = 21) +
theme_blank()
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.04) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
?network
n <- network(rgraph(4, tprob = 0.5), directed = TRUE)
n
n %v% family
n %v% 'family'
n %v% 'eaasdfas'
names(toplo)
n %v% "family" <- c('Habitat', 'Water', 'Salinity', 'Chla-a')
n <- network(rgraph(4, tprob = 0.5), directed = TRUE)
n %v% "family" <- c('Habitat', 'Water', 'Salinity', 'Chla-a')
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.04) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
n %v% "family" <- c('Habitat', 'Water', 'Chl-a', 'Salinity')
n <- network(rgraph(4, tprob = 0.5), directed = TRUE)
n %v% "family" <- c('Habitat', 'Water', 'Chl-a', 'Salinity')
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.04) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
plot(net)
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chl-a|Habitat:Water:Salinity]")
plot(net)
net
ggnetwork(n)
?geom_edgea
?geom_edges
e
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.1) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
n <- network(rgraph(4, tprob = 0.5), directed = F)
n %v% "family" <- c('Habitat', 'Water', 'Chl-a', 'Salinity')
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.1) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
n %v% "family" <- c('Habitat', 'Water', 'Chl-a', 'Salinity')
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.1) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.05) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
n %v% "family" <- c('Chl-a', 'Salinity', 'Habitat', 'Water')
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.05) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
n <- network(rgraph(4, tprob = 0.2), directed = F)
n %v% "family" <- c('Chl-a', 'Salinity', 'Habitat', 'Water')
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.05) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
n <- network(rgraph(4, tprob = 1), directed = F)
n %v% "family" <- c('Chl-a', 'Salinity', 'Habitat', 'Water')
e <- network.edgecount(n)
set.edge.attribute(n, "type", sample('x', e, replace = TRUE))
set.edge.attribute(n, "day", sample('x', e, replace = TRUE))
ggplot(n, aes(x = x, y = y, xend = xend, yend = yend), arrow.gap = 0.05) +
geom_edges(arrow = arrow(length = unit(6, "pt"), type = "closed")) +
geom_nodes(aes(fill = family), size = 8, pch = 21) +
theme_blank()
?network
matrix(rbinom(25,1,.4),5,5)
as.matrix(net)
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chl-a|Habitat:Water:Salinity]")
plot(net)
plot.bn(net)
net
net <- bnlearn::model2network("[Habitat][Water][Salinity|Habitat:Water][Chl-a|Habitat:Water:Salinity]")
plot.bn(net)
net
fittedBN <- bn.fit(net, data = cdat)
fittedBN <- bn.fit(net, data = toplo)
m <- matrix(rbinom(25,1,.4),5,5)
diag(m) <- 0
g <- network(m, directed=FALSE)
summary(g)
source('R/funcs.R')
source('R/get_chg.R')
source('R/get_clo.R')
source('R/get_cdt.R')
source('R/get_brk.R')
source('R/get_fin.R')
source('R/get_all.R')
source('R/rnd_dat.R')
library(tidyverse)
library(ggmap)
library(sf)
library(maptools)
library(gridExtra)
library(grid)
library(bnlearn)
library(ggnetwork)
data(wqmtch)
data(wqdat)
data(wqstat)
data(reststat)
data(restdat)
install.package('Rcpp')
install.packages('Rcpp')
source('R/funcs.R')
source('R/get_chg.R')
source('R/get_clo.R')
source('R/get_cdt.R')
source('R/get_brk.R')
source('R/get_fin.R')
source('R/get_all.R')
source('R/rnd_dat.R')
library(tidyverse)
library(ggmap)
library(sf)
library(maptools)
library(gridExtra)
library(grid)
library(bnlearn)
library(ggnetwork)
data(wqmtch)
data(wqdat)
data(wqstat)
data(reststat)
data(restdat)
install.packages('Rcpp')
source('R/funcs.R')
source('R/get_chg.R')
source('R/get_clo.R')
source('R/get_cdt.R')
source('R/get_brk.R')
source('R/get_fin.R')
source('R/get_all.R')
source('R/rnd_dat.R')
library(tidyverse)
library(ggmap)
library(sf)
library(maptools)
library(gridExtra)
library(grid)
library(bnlearn)
library(ggnetwork)
data(wqmtch)
data(wqdat)
data(wqstat)
data(reststat)
data(restdat)
library(ggmap)
install.packages('mapproj')
source('R/funcs.R')
source('R/get_chg.R')
source('R/get_clo.R')
source('R/get_cdt.R')
source('R/get_brk.R')
source('R/get_fin.R')
source('R/get_all.R')
source('R/rnd_dat.R')
library(tidyverse)
library(ggmap)
library(sf)
library(maptools)
library(gridExtra)
library(grid)
library(bnlearn)
library(ggnetwork)
data(wqmtch)
data(wqdat)
data(wqstat)
data(reststat)
data(restdat)
install.packages('haven')
install.packages('yaml')
source('R/funcs.R')
source('R/get_chg.R')
source('R/get_clo.R')
source('R/get_cdt.R')
source('R/get_brk.R')
source('R/get_fin.R')
source('R/get_all.R')
source('R/rnd_dat.R')
library(tidyverse)
library(ggmap)
library(sf)
library(maptools)
library(gridExtra)
library(grid)
library(bnlearn)
library(ggnetwork)
data(wqmtch)
data(wqdat)
data(wqstat)
data(reststat)
data(restdat)
install.packages('xml2')
# Chunk 1: mypal
pal <- function(x) RColorBrewer::brewer.pal(x, 'GnBu')
num_col <- 5
for(i in 1:num_col){
col.nm <- paste0('mypal',i)
hexa <- paste0(gsub('#', '', pal(5)[i]))
cat(paste0('\\definecolor{', col.nm,'}{HTML}{',hexa,'}'))
}
bg_col <- pal(num_col)[1]
pdf('fig/back_tmp.pdf',bg = bg_col)
frame()
invisible(dev.off())
# Chunk 2: setup
# set global chunk options
library(knitr)
opts_chunk$set(fig.path='fig/', fig.align = 'center', fig.show = 'hold', message = F, echo = F, results = 'asis', dev = 'pdf', dev.args = list(family = 'serif', bg = 'transparent'), fig.pos = '!ht', warning = F)
options(replace.assign = T, width = 90)
# Chunk 3: dep_dat
source('R/funcs.R')
source('R/get_chg.R')
source('R/get_clo.R')
source('R/get_cdt.R')
source('R/get_brk.R')
source('R/get_fin.R')
source('R/get_all.R')
source('R/rnd_dat.R')
library(tidyverse)
library(ggmap)
library(sf)
library(maptools)
library(gridExtra)
library(grid)
library(bnlearn)
library(ggnetwork)
data(wqmtch)
data(wqdat)
data(wqstat)
data(reststat)
data(restdat)
# Chunk 4
refs <- httr::GET('https://raw.githubusercontent.com/fawda123/refs/master/refs.bib')
refs <- rawToChar(refs$content)
writeLines(refs, con = file('refs.bib'))
# Chunk 5
##
# plots
# combine lat/lon for the plot
toplo <- wqmtch %>%
left_join(wqstat, by = 'stat') %>%
left_join(reststat, by = 'id') %>%
rename(
`Restoration\ngroup` = resgrp,
`Distance (dd)` = dist
)
# restoration project grouping column
resgrp <- 'top'
restall <- left_join(restdat, reststat, by = 'id')
names(restall)[names(restall) %in% resgrp] <- 'Restoration\ngroup'
ext <- make_bbox(wqstat$lon, wqstat$lat, f = 0.1)
map <- get_stamenmap(ext, zoom = 11, maptype = "toner-lite")
# base map
pbase <- ggmap(map) +
theme_bw() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = 'none',
plot.background = element_rect(fill = 'transparent', colour = NA)
)
##
# restoration, wq
p <- pbase +
geom_point(data = reststat, aes(x = lon, y = lat), size = 4, pch = 21, fill = 'grey', alpha = 0.8) +
geom_point(data = wqstat, aes(x = lon, y = lat), size = 3, pch = 16, color = 'black', alpha = 0.8)
pdf('fig/clomap1.pdf', bg = 'transparent', family = 'serif', width = 4, height = 5)
p
source('R/funcs.R')
source('R/get_chg.R')
source('R/get_clo.R')
source('R/get_cdt.R')
source('R/get_brk.R')
source('R/get_fin.R')
source('R/get_all.R')
source('R/rnd_dat.R')
library(tidyverse)
library(ggmap)
library(sf)
library(maptools)
library(gridExtra)
library(grid)
library(bnlearn)
library(ggnetwork)
data(wqmtch)
data(wqdat)
data(wqstat)
data(reststat)
data(restdat)
net <- bnlearn::model2network("[Habitat][Water][Salinity|Habitat:Water][Chl-a|Habitat:Water:Salinity]")
net
net <- model2network("[Habitat][Water][Salinity|Habitat:Water][Chl-a|Habitat:Water:Salinity]")
net
plot(net)
